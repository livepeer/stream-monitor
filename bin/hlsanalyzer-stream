#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'

# setup load path
lib = File.expand_path(File.join(__dir__, "..", "lib"))
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'securerandom'
require 'logger'

require 'prometheus_exporter'
require 'prometheus_exporter/server'
server = PrometheusExporter::Server::WebServer.new bind: '0.0.0.0', port: 9090
server.start

require 'streamer/full_cycle'
require 'streamer/services/analyzer'
require 'streamer/services/livepeer'
require 'streamer/services/discord'
require 'streamer/broadcaster_factory'
require 'streamer/decorators/logger_decorator'
require 'streamer/decorators/discord_decorator'

# Setup APIs
grace = ENV.fetch("MONITOR_DELAY").to_i
duration = ENV.fetch("BROADCAST_DURATION").to_i
playback_region = ENV.fetch("PLAYBACK_REGION")
ingest_region = ENV.fetch("INGEST_REGION")
analyzer = Streamer::Analyzer.new(
  api_key: ENV.fetch("HLS_ANALYZER_API_KEY"),
  host: ENV.fetch("HLS_ANALYZER_API_HOST"),
)
livepeer = Streamer::Livepeer.new(
  api_key: ENV.fetch("LIVEPEER_API_KEY"),
  host: ENV.fetch("LIVEPEER_API_HOST"),
)
discord = Streamer::Discord.new(
  webhook: ENV.fetch("DISCORD_WEBHOOK")
)
logger = Logger.new($stdout)
session_name = SecureRandom.uuid
profiles = [
  {
    "name": "720p",
    "bitrate": 2000000,
    "fps": 30,
    "width": 1280,
    "height": 720
  },
  {
    "name": "480p",
    "bitrate": 1000000,
    "fps": 30,
    "width": 854,
    "height": 480
  },
  {
    "name": "360p",
    "bitrate": 500000,
    "fps": 30,
    "width": 640,
    "height": 360
  }
]

current_cycle = nil

begin
  while true
    current_cycle = Streamer::FullCycle.new(
      grace: grace,
      duration: duration,
      playback_region: playback_region,
      ingest_region: ingest_region,
      analyzer: analyzer,
      livepeer: livepeer,
      session_name: session_name,
      profiles: profiles,
      broadcaster_factory: Streamer::BroadcasterFactory.new,
      decorators: [
        Streamer::LoggerDecorator.new(logger),
        Streamer::DiscordDecorator.new(discord),
      ]
    )
    current_cycle.execute
  end
rescue Interrupt
  current_cycle.interrupt!
  exit
end

      # logger.info("Cycle complete. Fetching monitor Summary before shutdown.")
      # stream_status = analyzer.status(@m3u8)
      # logger.info("Summary Fetched")
      # discord_status = Marshal.load(Marshal.dump(stream_status))
      # discord_status["status"]&.delete("Variants")
      # message = <<~MSG
      #   Broadcast complete.
      #     ingest: "#{ingest}"
      #     playback: "#{@m3u8}"
      #     summary:
      #   ```
      #   #{JSON.pretty_generate(stream_status)}
      #   ```
      # MSG
      # discord_message = <<~MSG
      #   Broadcast complete. Analysis for `"#{@m3u8}"`
      #   ```
      #   #{JSON.pretty_generate(discord_status)}
      #   ```
      # MSG
      # logger.info(message)
      # discord.send(
      #   content: discord_message
      # )
      #
