#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'

# setup load path
lib = File.expand_path(File.join(__dir__, "..", "lib"))
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'securerandom'
require 'logger'

require 'prometheus_exporter'
require 'prometheus_exporter/server'
server = PrometheusExporter::Server::WebServer.new bind: '0.0.0.0', port: 9090
server.start

require 'streamer'

# Setup APIs
boot_delay = ENV.fetch("BOOT_DELAY").to_i
duration = ENV.fetch("BROADCAST_DURATION").to_i
playback_region = ENV.fetch("PLAYBACK_REGION")
ingest_region = ENV.fetch("INGEST_REGION")
livepeer = Streamer::Livepeer.new(
  api_key: ENV.fetch("LIVEPEER_API_KEY"),
  host: ENV.fetch("LIVEPEER_API_HOST"),
)
discord = Streamer::Discord.new(
  webhook: ENV.fetch("DISCORD_WEBHOOK")
)
pagerduty = Streamer::PagerDuty.new(
  integration_key: ENV.fetch("PAGER_DUTY_API_KEY"),
  component: ENV.fetch("PAGER_DUTY_COMPONENT"),
)
page_after_n_failures = ENV.fetch("PAGE_AFTER_N_FAILURES", 3)

logger = Logger.new($stdout)
session_name = SecureRandom.uuid
profiles = [
  {
    "name": "720p",
    "bitrate": 2000000,
    "fps": 30,
    "width": 1280,
    "height": 720
  },
  {
    "name": "480p",
    "bitrate": 1000000,
    "fps": 30,
    "width": 854,
    "height": 480
  },
  {
    "name": "360p",
    "bitrate": 500000,
    "fps": 30,
    "width": 640,
    "height": 360
  }
]

current_cycle = nil

class TermSignal < StandardError; end

begin
  trap :TERM do
    raise TermSignal
  end

  page_on_multiple_non_zero = Streamer::PageMulipleNonZero.new(
    pagerduty: pagerduty,
    logger: logger,
    max_failures: page_after_n_failures,
  )

  while true
    current_cycle = Streamer::Cycle.new(
      grace: boot_delay,
      duration: duration,
      playback_region: playback_region,
      ingest_region: ingest_region,
      livepeer: livepeer,
      session_name: session_name,
      profiles: profiles,
      broadcaster_factory: Streamer::BroadcasterFactory.new,
      decorators: [
        Streamer::LoggerDecorator.new(logger),
        Streamer::MonitorPlaylist.new(logger: logger),
        Streamer::PageOnUnexpectedPlaylist.new(pagerduty, max_failures: 3),
        page_on_multiple_non_zero,
      ]
    )
    current_cycle.execute
  end

rescue TermSignal
  logger.info "Trapped TERM Signal. Terminating..."
  current_cycle&.shutdown!
  exit
rescue Interrupt
  current_cycle&.interrupt!
  exit
rescue StandardError => e
  logger.error(e.full_message)
  current_cycle&.shutdown!
  exit
end
